const SupplyChain = artifacts.require("SupplyChain");

contract('SupplyChainTest', async (accounts) => {
   // Declare few constants and assign a few sample accounts generated by ganache-cli
   const kOwnerID       = accounts[0];
   const kFarmerID      = accounts[1];
   const kBrewerID      = accounts[2];
   const kDistributorID = accounts[3];
   const kRetailerID    = accounts[4];
   const kCustomerID    = accounts[5];

   const kGrainName  = "Ultra Grain";
   const kGrainNotes = "The best grain around";
   const kBeerName   = "Ultra beer";
   const kBeerNotes  = "The best beer around";

   const kProductPrice = web3.toWei(1, "ether");

   const kEmptyAddress = "0x0000000000000000000000000000000000000000";

   const states = {
      Start                  : 0,
      DistributorBeerOrdered : 1,
      GrainOrdered           : 2,
      GrainHarvested         : 3,
      GrainProcessed         : 4,
      GrainPackaged          : 5,
      GrainShipped           : 6,
      GrainReceived          : 7,
      BeerBrewed             : 8,
      BeerPackaged           : 9,
      DistributorBeerShipped : 10,
      DistributorBeerReceived: 11,
      RetailerBeerOrdered    : 12,
      RetailerBeerShipped    : 13,
      RetailerBeerReceived   : 14,
      BeerPurchased          : 15,
   };

   const kUPC = 1;
   const kSKU = 1;

   ///Available Accounts
   ///==================
   ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
   ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
   ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
   ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
   ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
   ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
   ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
   ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
   ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
   ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

   console.log("ganache-cli accounts used here...");
   console.log("Contract Owner: accounts[0] ", kOwnerID);
   console.log("Farmer: accounts[1] ", kFarmerID);
   console.log("Brewer: accounts[2] ", kBrewerID);
   console.log("Distributor: accounts[3] ", kDistributorID);
   console.log("Retailer: accounts[4] ", kRetailerID);
   console.log("Customer: accounts[5] ", kCustomerID);

   /*
    * ------------------------------------------------------------------------
    *
    * verifyGrainItem() -
    *
    *    Verifies Grain object has correct properties.
    *
    * ------------------------------------------------------------------------
    */
   async function verifyGrainItem(supplyChain,
                                  UPC,
                                  SKU,
                                  farmerID,
                                  consumerID,
                                  isForSale,
                                  isSold,
                                  price,
                                  itemName,
                                  itemNotes)
   {
      const grainIDBuffer   = await supplyChain.fetchGrainID(UPC);
      const grainMetaBuffer = await supplyChain.fetchGrainMeta(UPC);

      // Verify the result
      assert.equal(grainIDBuffer[0].toNumber(), UPC, "Error: Invalid item UPC");
      assert.equal(grainIDBuffer[1].toNumber(), SKU, "Error: Invalid item SKU");
      assert.equal(grainIDBuffer[2], farmerID, "Error: Invalid farmerID");
      assert.equal(grainIDBuffer[3], consumerID, "Error: Invalid consumerID");

      assert.equal(grainMetaBuffer[0], isForSale, "Error: Invalid isForSale");
      assert.equal(grainMetaBuffer[1], isSold, "Error: Invalid isSold");
      assert.equal(grainMetaBuffer[2].toNumber(), price, "Error: Invalid price");
      assert.equal(grainMetaBuffer[3], itemName, "Error: Invalid itemName");
      assert.equal(grainMetaBuffer[4], itemNotes, "Error: Invalid itemNotes");
   }

   /*
    * ------------------------------------------------------------------------
    *
    * verifyBeerItem() -
    *
    *    Verifies Beer object has correct properties.
    *
    * ------------------------------------------------------------------------
    */
   async function verifyBeerItem(supplyChain,
                                 UPC,
                                 SKU,
                                 grainUPC,
                                 brewerID,
                                 distributorID,
                                 retailerID,
                                 customerID,
                                 itemState,
                                 isForSale,
                                 isSold,
                                 price,
                                 itemName,
                                 itemNotes)
   {
      const beerIDBuffer   = await supplyChain.fetchBeerID(UPC);
      const beerMetaBuffer = await supplyChain.fetchBeerMeta(UPC);

      assert.equal(beerIDBuffer[0].toNumber(), UPC, "Error: Invalid item UPC");
      assert.equal(beerIDBuffer[1].toNumber(), SKU, "Error: Invalid item SKU");
      assert.equal(beerIDBuffer[2].toNumber(), grainUPC, "Error: Invalid grain UPC");
      assert.equal(beerIDBuffer[3], brewerID, "Error: Invalid brewerID");
      assert.equal(beerIDBuffer[4], distributorID, "Error: Invalid distributorID");
      assert.equal(beerIDBuffer[5], retailerID, "Error: Invalid retailerID");
      assert.equal(beerIDBuffer[6], customerID, "Error: Invalid customerID");

      assert.equal(beerMetaBuffer[0].toNumber(), itemState, "Error: Invalid itemState");
      assert.equal(beerMetaBuffer[1], isForSale, "Error: Invalid isForSale");
      assert.equal(beerMetaBuffer[2], isSold, "Error: Invalid isSold");
      assert.equal(beerMetaBuffer[3].toNumber(), price, "Error: Invalid price");
      assert.equal(beerMetaBuffer[4], itemName, "Error: Invalid itemName");
      assert.equal(beerMetaBuffer[5], itemNotes, "Error: Invalid itemNotes");
   }

   /*
    * ------------------------------------------------------------------------
    *
    * initializeSupplyChain() -
    *
    *    Initializes SupplyChain contract.
    *
    * ------------------------------------------------------------------------
    */
   async function initializeSupplyChain()
   {
      let supplyChain = await SupplyChain.new();
      await supplyChain.setFarmer(kFarmerID);
      await supplyChain.setBrewer(kBrewerID);
      await supplyChain.setDistributor(kDistributorID);
      await supplyChain.setRetailer(kRetailerID);
      await supplyChain.setCustomer(kCustomerID);
      return supplyChain;
   }

   /*
    * ------------------------------------------------------------------------
    *
    * initializeState() -
    *
    *    Initializes SupplyChain to provided state.
    *
    * ------------------------------------------------------------------------
    */
   async function initializeState(supplyChain,
                                  state)
   {
      // Check valid state
      assert.isAtLeast(
         state, states.Start,
         "Error: Invalid state must be at least Start"
      );
      assert.isAtMost(
         state, states.BeerPurchased,
         "Error: Invalid state must be at most BeerPurchased"
      );

      // Perform actions to get to state
      var tx = null;

      // 0
      await supplyChain.stockGrain(
         kProductPrice,
         kGrainName,
         kGrainNotes,
         {from: kFarmerID}
      );
      await supplyChain.setGrainForSale(
         kUPC,
         true,
         {from: kFarmerID}
      );
      await supplyChain.stockBeer(
         kProductPrice,
         kUPC,
         kBeerName,
         kBeerNotes,
         {from: kBrewerID}
      );
      await supplyChain.setBeerForSale(
         kUPC,
         true,
         {from: kBrewerID}
      );
      if (state == states.Start) return tx;

      // 1
      tx = await supplyChain.distributorOrderBeer(
         kUPC,
         {from: kDistributorID, value: kProductPrice}
      );
      if (state == states.DistributorBeerOrdered) return tx;

      // 2
      tx = await supplyChain.orderGrain(
         kUPC,
         kUPC,
         {from: kBrewerID, value: kProductPrice}
      );
      if (state == states.GrainOrdered) return tx;

      // 3
      tx = await supplyChain.harvestGrain(
         kUPC,
         {from: kFarmerID}
      );
      if (state == states.GrainHarvested) return tx;

      // 4
      tx = await supplyChain.processGrain(
         kUPC,
         {from: kFarmerID}
      );
      if (state == states.GrainProcessed) return tx;

      // 5
      tx = await supplyChain.packageGrain(
         kUPC,
         {from: kFarmerID}
      );
      if (state == states.GrainPackaged) return tx;

      // 6
      tx = await supplyChain.shipGrain(
         kUPC,
         {from: kFarmerID}
      );
      if (state == states.GrainShipped) return tx;

      // 7
      tx = await supplyChain.receiveGrain(
         kUPC,
         {from: kBrewerID}
      );
      if (state == states.GrainReceived) return tx;

      // 8
      tx = await supplyChain.brewBeer(
         kUPC,
         {from: kBrewerID}
      );
      if (state == states.BeerBrewed) return tx;

      // 9
      tx = await supplyChain.packageBeer(
         kUPC,
         {from: kBrewerID}
      );
      if (state == states.BeerPackaged) return tx;

      // 10
      tx = await supplyChain.distributorShipBeer(
         kUPC,
         {from: kBrewerID}
      );
      if (state == states.DistributorBeerShipped) return tx;

      // 11
      tx = await supplyChain.distributorReceiveBeer(
         kUPC,
         {from: kDistributorID}
      );
      if (state == states.DistributorBeerReceived) return tx;

      // 12
      tx = await supplyChain.retailerOrderBeer(
         kUPC,
         {from: kRetailerID, value: kProductPrice}
      );
      if (state == states.RetailerBeerOrdered) return tx;

      // 13
      tx = await supplyChain.retailerShipBeer(
         kUPC,
         {from: kDistributorID}
      );
      if (state == states.RetailerBeerShipped) return tx;

      // 14
      tx = await supplyChain.retailerReceiveBeer(
         kUPC,
         {from: kRetailerID}
      );
      if (state == states.RetailerBeerReceived) return tx;

      // 15
      tx = await supplyChain.purchaseBeer(
         kUPC,
         {from: kCustomerID, value: kProductPrice}
      );
      if (state == states.BeerPurchased) return tx;

      assert.fail("Error: NOT_REACHED");
   }

   it("Testing stockGrain()", async() => {
      // Declare and initialize
      const expectedEvent = "GrainStocked";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await supplyChain.stockGrain(
         kProductPrice,
         kGrainName,
         kGrainNotes,
         {from: kFarmerID}
      );
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kEmptyAddress,    // consumerID
         false,            // forSale
         false,            // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
   });

   it("Testing setGrainForSale()", async() => {
      // Declare and initialize
      const expectedEvent = "GrainSetForSale";
      const forSale       = true;
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      await supplyChain.stockGrain(
         kProductPrice,
         kGrainName,
         kGrainNotes,
         {from: kFarmerID}
      );
      const tx = await supplyChain.setGrainForSale(
         kUPC,
         forSale,
         {from: kFarmerID}
      );
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kEmptyAddress,    // consumerID
         forSale,          // forSale
         false,            // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
   });

   it("Testing setGrainSold()", async() => {
      // Declare and initialize
      const expectedEvent = "GrainSetSold";
      const isSold        = true;
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      await supplyChain.stockGrain(
         kProductPrice,
         kGrainName,
         kGrainNotes,
         {from: kFarmerID}
      );
      const tx = await supplyChain.setGrainSold(
         kUPC,
         isSold,
         {from: kFarmerID}
      );
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kEmptyAddress,    // consumerID
         false,            // forSale
         isSold,           // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
   });

   it("Testing stockBeer()", async() => {
      // Declare and initialize
      const expectedState = states.Start;
      const expectedEvent = "BeerStocked";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      await supplyChain.stockGrain(
         kProductPrice,
         kGrainName,
         kGrainNotes,
         {from: kFarmerID}
      );
      const tx = await supplyChain.stockBeer(
         kProductPrice,
         kUPC,
         kBeerName,
         kBeerNotes,
         {from: kBrewerID}
      );
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kEmptyAddress,    // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         false,            // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing setBeerForSale()", async() => {
      // Declare and initialize
      const expectedState = states.Start;
      const expectedEvent = "BeerSetForSale";
      const forSale       = true;
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      await supplyChain.stockGrain(
         kProductPrice,
         kGrainName,
         kGrainNotes,
         {from: kFarmerID}
      );
      await supplyChain.stockBeer(
         kProductPrice,
         kUPC,
         kBeerName,
         kBeerNotes,
         {from: kBrewerID}
      );
      const tx = await supplyChain.setBeerForSale(
         kUPC,
         forSale,
         {from: kBrewerID}
      );
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kEmptyAddress,    // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         forSale,          // isForSale
         false,            // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing setBeerSold()", async() => {
      // Declare and initialize
      const expectedState = states.Start;
      const expectedEvent = "BeerSetSold";
      const isSold        = true;
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      await supplyChain.stockGrain(
         kProductPrice,
         kGrainName,
         kGrainNotes,
         {from: kFarmerID}
      );
      await supplyChain.stockBeer(
         kProductPrice,
         kUPC,
         kBeerName,
         kBeerNotes,
         {from: kBrewerID}
      );
      const tx = await supplyChain.setBeerSold(
         kUPC,
         isSold,
         {from: kBrewerID}
      );
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kEmptyAddress,    // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         isSold,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing distributorOrderBeer()", async() => {
      // Declare and initialize
      const expectedState = states.DistributorBeerOrdered;
      const expectedEvent = "DistributorBeerOrdered";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kEmptyAddress,    // consumerID
         true,             // forSale
         false,            // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         true,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing orderGrain()", async() => {
      // Declare and initialize
      const expectedState = states.GrainOrdered;
      const expectedEvent = "GrainOrdered";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         true,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing harvestGrain()", async() => {
      // Declare and initialize
      const expectedState = states.GrainHarvested;
      const expectedEvent = "GrainHarvested";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         true,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing processGrain()", async() => {
      // Declare and initialize
      const expectedState = states.GrainProcessed;
      const expectedEvent = "GrainProcessed";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         true,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing packageGrain()", async() => {
      // Declare and initialize
      const expectedState = states.GrainPackaged;
      const expectedEvent = "GrainPackaged";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         true,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing shipGrain()", async() => {
      // Declare and initialize
      const expectedState = states.GrainShipped;
      const expectedEvent = "GrainShipped";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         true,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing receiveGrain()", async() => {
      // Declare and initialize
      const expectedState = states.GrainReceived;
      const expectedEvent = "GrainReceived";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         true,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing brewBeer()", async() => {
      // Declare and initialize
      const expectedState = states.BeerBrewed;
      const expectedEvent = "BeerBrewed";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         true,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing packageBeer()", async() => {
      // Declare and initialize
      const expectedState = states.BeerPackaged;
      const expectedEvent = "BeerPackaged";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         true,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing distributorShipBeer()", async() => {
      // Declare and initialize
      const expectedState = states.DistributorBeerShipped;
      const expectedEvent = "DistributorBeerShipped";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         true,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing distributorReceiveBeer()", async() => {
      // Declare and initialize
      const expectedState = states.DistributorBeerReceived;
      const expectedEvent = "DistributorBeerReceived";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         true,             // isForSale
         false,            // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing retailerOrderBeer()", async() => {
      // Declare and initialize
      const expectedState = states.RetailerBeerOrdered;
      const expectedEvent = "RetailerBeerOrdered";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kRetailerID,      // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         true,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing retailerShipBeer()", async() => {
      // Declare and initialize
      const expectedState = states.RetailerBeerShipped;
      const expectedEvent = "RetailerBeerShipped";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kRetailerID,      // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         false,            // isForSale
         true,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing retailerReceiveBeer()", async() => {
      // Declare and initialize
      const expectedState = states.RetailerBeerReceived;
      const expectedEvent = "RetailerBeerReceived";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kRetailerID,      // retailerID
         kEmptyAddress,    // customerID
         expectedState,    // itemState
         true,             // isForSale
         false,            // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing purchaseBeer()", async() => {
      // Declare and initialize
      const expectedState = states.BeerPurchased;
      const expectedEvent = "BeerPurchased";
      const supplyChain   = await initializeSupplyChain();

      // Perform action
      const tx = await initializeState(supplyChain, expectedState);
      assert.isAbove(tx.logs.length, 0, "Error: No events triggered");
      const event = tx.logs[0].event;
      assert.equal(event, expectedEvent, "Error: Invalid event emitted");

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kBrewerID,        // consumerID
         false,            // forSale
         true,             // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kDistributorID,   // distributorID
         kRetailerID,      // retailerID
         kCustomerID,      // customerID
         expectedState,    // itemState
         false,            // isForSale
         true,             // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });


   it("Testing fetchGrainID()", async() => {
      // Declare and initialize
      const supplyChain = await initializeSupplyChain();

      // Perform action
      await supplyChain.stockGrain(
         kProductPrice,
         kGrainName,
         kGrainNotes,
         {from: kFarmerID}
      );

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kEmptyAddress,    // consumerID
         false,            // forSale
         false,            // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
   });

   it("Testing fetchGrainMeta()", async() => {
      // Declare and initialize
      const supplyChain = await initializeSupplyChain();

      // Perform action
      await supplyChain.stockGrain(
         kProductPrice,
         kGrainName,
         kGrainNotes,
         {from: kFarmerID}
      );

      // Verify the result
      await verifyGrainItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kFarmerID,        // farmerID
         kEmptyAddress,    // consumerID
         false,            // forSale
         false,            // isSold
         kProductPrice,    // price
         kGrainName,       // itemName
         kGrainNotes       // itemNotes
      );
   });

   it("Testing fetchBeerID()", async() => {
      // Declare and initialize
      const supplyChain = await initializeSupplyChain();

      // Perform action
      await supplyChain.stockGrain(
         kProductPrice,
         kGrainName,
         kGrainNotes,
         {from: kFarmerID}
      );
      await supplyChain.stockBeer(
         kProductPrice,
         kUPC,
         kBeerName,
         kBeerNotes,
         {from: kBrewerID}
      );

      // Verify the result
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kEmptyAddress,    // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         states.Start,     // itemState
         false,            // isForSale
         false,            // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });

   it("Testing fetchBeerMeta()", async() => {
      // Declare and initialize
      const supplyChain = await initializeSupplyChain();

      // Perform action
      await supplyChain.stockGrain(
         kProductPrice,
         kGrainName,
         kGrainNotes,
         {from: kFarmerID}
      );
      await supplyChain.stockBeer(
         kProductPrice,
         kUPC,
         kBeerName,
         kBeerNotes,
         {from: kBrewerID}
      );

      // Verify the result
      await verifyBeerItem(
         supplyChain,      // supplyChain
         kUPC,             // UPC
         kSKU,             // SKU
         kUPC,             // grainUPC
         kBrewerID,        // brewerID
         kEmptyAddress,    // distributorID
         kEmptyAddress,    // retailerID
         kEmptyAddress,    // customerID
         states.Start,     // itemState
         false,            // isForSale
         false,            // isSold
         kProductPrice,    // price
         kBeerName,        // itemName
         kBeerNotes        // itemNotes
      );
   });
});

